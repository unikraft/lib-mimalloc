From 5b2d66f3b8ecbf4fd43cf0917ef4bc417d07d385 Mon Sep 17 00:00:00 2001
From: Hamza Chandad <hchandad@proton.me>
Date: Fri, 23 Sep 2022 12:53:15 +0000
Subject: [PATCH] test: port test/test-api.c

Signed-off-by: Hamza Chandad <hchandad@proton.me>
---
 test/test-api.c | 425 ++++++++++++++++++++++++++----------------------
 1 file changed, 231 insertions(+), 194 deletions(-)

diff --git a/test/test-api.c b/test/test-api.c
index 166cfca..f521902 100644
--- a/test/test-api.c
+++ b/test/test-api.c
@@ -26,6 +26,8 @@ we therefore test the API over various inputs. Please add more tests :-)
 #include <stdint.h>
 #include <errno.h>
 
+#include <uk/test.h>
+
 #ifdef __cplusplus
 #include <vector>
 #endif
@@ -33,214 +35,249 @@ we therefore test the API over various inputs. Please add more tests :-)
 #include "mimalloc.h"
 // #include "mimalloc-internal.h"
 
-// ---------------------------------------------------------------------------
-// Test macros: CHECK(name,predicate) and CHECK_BODY(name,body)
-// ---------------------------------------------------------------------------
-static int ok = 0;
-static int failed = 0;
-
-#define CHECK_BODY(name,body) \
- do { \
-  fprintf(stderr,"test: %s...  ", name ); \
-  bool result = true;                                     \
-  do { body } while(false);                                \
-  if (!(result)) {                                        \
-    failed++; \
-    fprintf(stderr,                                       \
-            "\n  FAILED: %s:%d:\n  %s\n",                 \
-            __FILE__,                                     \
-            __LINE__,                                     \
-            #body);                                       \
-    /* exit(1); */ \
-  } \
-  else { \
-    ok++;                               \
-    fprintf(stderr,"ok.\n");                    \
-  }                                             \
- } while (false)
-
-#define CHECK(name,expr)      CHECK_BODY(name,{ result = (expr); })
-
-// ---------------------------------------------------------------------------
-// Test functions
-// ---------------------------------------------------------------------------
-bool test_heap1();
-bool test_heap2();
-bool test_stl_allocator1();
-bool test_stl_allocator2();
-
-// ---------------------------------------------------------------------------
-// Main testing
-// ---------------------------------------------------------------------------
-int main() {
-  mi_option_disable(mi_option_verbose);
-
-  // ---------------------------------------------------
-  // Malloc
-  // ---------------------------------------------------
-
-  CHECK_BODY("malloc-zero",{
-    void* p = mi_malloc(0); mi_free(p);
-  });
-  CHECK_BODY("malloc-nomem1",{
-    result = (mi_malloc(SIZE_MAX/2) == NULL);
-  });
-  CHECK_BODY("malloc-null",{
-    mi_free(NULL);
-  });
-  CHECK_BODY("calloc-overflow",{
+// Declared as a variable,  to get a readable testsuite log
+const int SHOULD_NOT_CRASH = 1;
+
+// ---------------------------------------------------
+// Malloc
+// ---------------------------------------------------
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_zero)
+{
+	void *p = &p;
+
+	p = mi_malloc(0);
+	UK_TEST_EXPECT(p != &p);
+	mi_free(p);
+
+	UK_TEST_EXPECT(SHOULD_NOT_CRASH);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_nomem1)
+{
+	UK_TEST_EXPECT_PTR_EQ(mi_malloc(SIZE_MAX/2), NULL);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_null)
+{
+	mi_free(NULL);
+
+	UK_TEST_EXPECT(SHOULD_NOT_CRASH);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite,  calloc_overflow)
+{
     // use (size_t)&mi_calloc to get some number without triggering compiler warnings
-    result = (mi_calloc((size_t)&mi_calloc,SIZE_MAX/1000) == NULL);
-  });
-  CHECK_BODY("calloc0",{
-    result = (mi_usable_size(mi_calloc(0,1000)) <= 16);
-  });
-
-  // ---------------------------------------------------
-  // Extended
-  // ---------------------------------------------------  
-  CHECK_BODY("posix_memalign1", {
-    void* p = &p;
-    int err = mi_posix_memalign(&p, sizeof(void*), 32);
-    result = ((err==0 && (uintptr_t)p % sizeof(void*) == 0) || p==&p);
-    mi_free(p);
-  });
-  CHECK_BODY("posix_memalign_no_align", {
-    void* p = &p;
-    int err = mi_posix_memalign(&p, 3, 32);
-    result = (err==EINVAL && p==&p);
-  });
-  CHECK_BODY("posix_memalign_zero", {
-    void* p = &p;
-    int err = mi_posix_memalign(&p, sizeof(void*), 0);
-    mi_free(p);
-    result = (err==0);
-  });
-  CHECK_BODY("posix_memalign_nopow2", {
-    void* p = &p;
-    int err = mi_posix_memalign(&p, 3*sizeof(void*), 32);
-    result = (err==EINVAL && p==&p);
-  });
-  CHECK_BODY("posix_memalign_nomem", {
-    void* p = &p;
-    int err = mi_posix_memalign(&p, sizeof(void*), SIZE_MAX);
-    result = (err==ENOMEM && p==&p);
-  });
-
-  // ---------------------------------------------------
-  // Aligned API
-  // ---------------------------------------------------
-  CHECK_BODY("malloc-aligned1", {
-    void* p = mi_malloc_aligned(32,32); result = (p != NULL && (uintptr_t)(p) % 32 == 0); mi_free(p);
-  });
-  CHECK_BODY("malloc-aligned2", {
-    void* p = mi_malloc_aligned(48,32); result = (p != NULL && (uintptr_t)(p) % 32 == 0); mi_free(p);
-  });
-  CHECK_BODY("malloc-aligned3", {
-    void* p1 = mi_malloc_aligned(48,32); bool result1 = (p1 != NULL && (uintptr_t)(p1) % 32 == 0); 
-    void* p2 = mi_malloc_aligned(48,32); bool result2 = (p2 != NULL && (uintptr_t)(p2) % 32 == 0);
-    mi_free(p2);
-    mi_free(p1);
-    result = (result1&&result2);
-  });
-  CHECK_BODY("malloc-aligned4", {
-    void* p;
-    bool ok = true;
-    for (int i = 0; i < 8 && ok; i++) {
-      p = mi_malloc_aligned(8, 16);
-      ok = (p != NULL && (uintptr_t)(p) % 16 == 0); mi_free(p);
-    }
-    result = ok;
-  });
-  CHECK_BODY("malloc-aligned-at1", {
-    void* p = mi_malloc_aligned_at(48,32,0); result = (p != NULL && ((uintptr_t)(p) + 0) % 32 == 0); mi_free(p);
-  });
-  CHECK_BODY("malloc-aligned-at2", {
-    void* p = mi_malloc_aligned_at(50,32,8); result = (p != NULL && ((uintptr_t)(p) + 8) % 32 == 0); mi_free(p);
-  });  
-  CHECK_BODY("memalign1", {
-    void* p;
-    bool ok = true;
-    for (int i = 0; i < 8 && ok; i++) {
-      p = mi_memalign(16,8);
-      ok = (p != NULL && (uintptr_t)(p) % 16 == 0); mi_free(p);
-    }
-    result = ok;
-    });
-
-  // ---------------------------------------------------
-  // Heaps
-  // ---------------------------------------------------
-  CHECK("heap_destroy", test_heap1());
-  CHECK("heap_delete", test_heap2());
-
-  //mi_stats_print(NULL);
-
-  // ---------------------------------------------------
-  // various
-  // ---------------------------------------------------
-  CHECK_BODY("realpath", {
-    char* s = mi_realpath( ".", NULL );
-    // printf("realpath: %s\n",s);
-    mi_free(s);
-  });
-
-  CHECK("stl_allocator1", test_stl_allocator1());
-  CHECK("stl_allocator2", test_stl_allocator2());
-
-  // ---------------------------------------------------
-  // Done
-  // ---------------------------------------------------[]
-  fprintf(stderr,"\n\n---------------------------------------------\n"
-                 "succeeded: %i\n"
-                 "failed   : %i\n\n", ok, failed);
-  return failed;
+	UK_TEST_EXPECT_PTR_EQ(
+		mi_calloc((size_t)&mi_calloc, SIZE_MAX/1000),
+		NULL
+	);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, calloc0)
+{
+	UK_TEST_EXPECT(mi_usable_size(mi_calloc(0, 1000)) <= 16);
+}
+
+// ---------------------------------------------------
+// Extended
+// ---------------------------------------------------
+
+UK_TESTCASE(libmimalloc_api_testsuite, posix_memalign1)
+{
+	void *p = &p;
+	int err = mi_posix_memalign(&p, sizeof(void *), 32);
+
+	UK_TEST_EXPECT(
+		(err == 0 && (uintptr_t)p % sizeof(void *) == 0)
+		|| p == &p
+	);
+	mi_free(p);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, posix_memalign_no_align)
+{
+	void *p = &p;
+	int err = mi_posix_memalign(&p, 3, 32);
+
+	UK_TEST_EXPECT_SNUM_EQ(err, EINVAL);
+	UK_TEST_EXPECT_PTR_EQ(p, &p);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, posix_memalign_zero)
+{
+	void *p = &p;
+	int err = mi_posix_memalign(&p, sizeof(void *), 0);
+
+	mi_free(p);
+	UK_TEST_EXPECT_SNUM_EQ(err, 0);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, posix_memalign_nopow2)
+{
+	void *p = &p;
+	int err = mi_posix_memalign(&p, 3 * sizeof(void *), 32);
+
+	UK_TEST_EXPECT_SNUM_EQ(err, EINVAL);
+	UK_TEST_EXPECT_PTR_EQ(p, &p);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, posix_memalign_nomem)
+{
+	void *p = &p;
+	int err = mi_posix_memalign(&p, sizeof(void *), SIZE_MAX);
+
+	UK_TEST_EXPECT_SNUM_EQ(err, ENOMEM);
+	UK_TEST_EXPECT_PTR_EQ(p, &p);
+}
+
+// ---------------------------------------------------
+// Aligned API
+// ---------------------------------------------------
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_aligned1)
+{
+	void *p = mi_malloc_aligned(32, 32);
+
+	UK_TEST_EXPECT(p != NULL);
+	UK_TEST_EXPECT((uintptr_t)(p) % 32 == 0);
+	mi_free(p);
+
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_aligned2)
+{
+	void *p = mi_malloc_aligned(48, 32);
+
+	UK_TEST_EXPECT(p != NULL);
+	UK_TEST_EXPECT((uintptr_t)(p) % 32 == 0);
+	mi_free(p);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_aligned3)
+{
+	void *p1 = mi_malloc_aligned(48, 32);
+
+	UK_TEST_EXPECT(p1 != NULL);
+	UK_TEST_EXPECT((uintptr_t)(p1) % 32 == 0);
+
+	void *p2 = mi_malloc_aligned(48, 32);
+
+	UK_TEST_EXPECT(p2 != NULL);
+	UK_TEST_EXPECT((uintptr_t)(p2) % 32 == 0);
+	mi_free(p2);
+	mi_free(p1);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_aligned4)
+{
+	void *p;
+	bool ok = true;
+
+	for (int i = 0; i < 8 && ok; i++) {
+		p = mi_malloc_aligned(8, 16);
+		ok = (p != NULL && (uintptr_t)(p) % 16 == 0); mi_free(p);
+	}
+	UK_TEST_EXPECT(ok);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_aligned_at1)
+{
+	void *p = mi_malloc_aligned_at(48, 32, 0);
+
+	UK_TEST_EXPECT(p != NULL);
+	UK_TEST_EXPECT(((uintptr_t)(p) + 0) % 32 == 0);
+	mi_free(p);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, malloc_aligned_at2)
+{
+	void *p = mi_malloc_aligned_at(50, 32, 8);
+
+	UK_TEST_EXPECT(p != NULL);
+	UK_TEST_EXPECT(((uintptr_t)(p) + 8) % 32 == 0);
+	mi_free(p);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, memalign1)
+{
+	void *p;
+	bool ok = true;
+
+	for (int i = 0; i < 8 && ok; i++) {
+		p = mi_memalign(16, 8);
+		ok = (p != NULL && (uintptr_t)(p) % 16 == 0); mi_free(p);
+	}
+	UK_TEST_EXPECT(ok);
 }
 
 // ---------------------------------------------------
-// Larger test functions
+// Heaps
 // ---------------------------------------------------
+UK_TESTCASE(libmimalloc_api_testsuite, heap_destroy)
+{
+	mi_heap_t *heap = mi_heap_new();
+	int *p1 = mi_heap_malloc_tp(heap, int);
+	int *p2 = mi_heap_malloc_tp(heap, int);
+	*p1 = *p2 = 43;
+	mi_heap_destroy(heap);
+
+	UK_TEST_EXPECT(SHOULD_NOT_CRASH);
+}
+
+UK_TESTCASE(libmimalloc_api_testsuite, heap_delete)
+{
+	mi_heap_t *heap = mi_heap_new();
+	int *p1 = mi_heap_malloc_tp(heap, int);
+	int *p2 = mi_heap_malloc_tp(heap, int);
 
-bool test_heap1() {
-  mi_heap_t* heap = mi_heap_new();
-  int* p1 = mi_heap_malloc_tp(heap,int);
-  int* p2 = mi_heap_malloc_tp(heap,int);
-  *p1 = *p2 = 43;
-  mi_heap_destroy(heap);
-  return true;
+	mi_heap_delete(heap);
+	*p1 = 42;
+	mi_free(p1);
+	mi_free(p2);
+
+	UK_TEST_EXPECT(SHOULD_NOT_CRASH);
 }
 
-bool test_heap2() {
-  mi_heap_t* heap = mi_heap_new();
-  int* p1 = mi_heap_malloc_tp(heap,int);
-  int* p2 = mi_heap_malloc_tp(heap,int);
-  mi_heap_delete(heap);
-  *p1 = 42;
-  mi_free(p1);
-  mi_free(p2);
-  return true;
+// ---------------------------------------------------
+// various
+// ---------------------------------------------------
+UK_TESTCASE(libmimalloc_api_testsuite, realpath)
+{
+	void *s = &s;
+
+	s = (char *)mi_realpath(".", NULL);
+	UK_TEST_EXPECT(s != &s);
+	mi_free(s);
+	UK_TEST_EXPECT(SHOULD_NOT_CRASH);
+
 }
 
-bool test_stl_allocator1() {
 #ifdef __cplusplus
-  std::vector<int, mi_stl_allocator<int> > vec;
-  vec.push_back(1);
-  vec.pop_back();
-  return vec.size() == 0;
-#else
-  return true;
-#endif
+UK_TESTCASE(libmimalloc_api_testsuite, stl_allocator1)
+{
+	std::vector<int, mi_stl_allocator<int>> vec;
+	vec.push_back(1);
+	vec.pop_back();
+	UK_TEST_EXPECT_ZERO(vec.size());
 }
+#endif
 
+#ifdef __cplusplus
 struct some_struct  { int i; int j; double z; };
 
-bool test_stl_allocator2() {
-#ifdef __cplusplus
-  std::vector<some_struct, mi_stl_allocator<some_struct> > vec;
-  vec.push_back(some_struct());
-  vec.pop_back();
-  return vec.size() == 0;
+UK_TESTCASE(libmimalloc_api_testsuite, stl_allocator2)
+{
+	std::vector<some_struct, mi_stl_allocator<some_struct>> vec;
+	vec.push_back(some_struct());
+	vec.pop_back();
+	UK_TEST_EXPECT_ZERO(vec.size());
+}
+#endif
+
+#ifdef CONFIG_LIBUKBOOT_INITMIMALLOC
+uk_testsuite_register(libmimalloc_api_testsuite, NULL);
 #else
-  return true;
+#error You need to select mimalloc as the default memory allocator \
+	inside the ukboot library for tests to run.
 #endif
-}
-- 
2.25.1

